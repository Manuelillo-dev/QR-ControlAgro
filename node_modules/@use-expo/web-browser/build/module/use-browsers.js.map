{"version":3,"sources":["use-browsers.ts"],"names":["getCustomTabsSupportingBrowsersAsync","useEffect","useState","Platform","useBrowsers","browsers","setBrowsers","OS","then","result","browserPackages"],"mappings":"AAAA,SAASA,oCAAT,QAAqD,kBAArD;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,cAAzB;AAEA;;;;;;;;;AAQA,OAAO,SAASC,WAAT,GAAiC;AACvC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAW,EAAX,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIE,QAAQ,CAACI,EAAT,KAAgB,SAApB,EAA+B;AAC9B;AACA;;AAEDP,IAAAA,oCAAoC,GAAGQ,IAAvC,CACCC,MAAM,IAAIH,WAAW,CAACG,MAAM,CAACC,eAAR,CADtB;AAGA,GARQ,EAQN,EARM,CAAT;AAUA,SAAOL,QAAP;AACA","sourcesContent":["import { getCustomTabsSupportingBrowsersAsync } from 'expo-web-browser';\nimport { useEffect, useState } from 'react';\nimport { Platform } from 'react-native';\n\n/**\n * Get a list of valid browser packages on Android.\n * This hook will always return an array, even when no browsers are available.\n *\n * @see https://docs.expo.io/versions/latest/sdk/webbrowser/#webbrowsergetcustomtabssupportingbrowsers\n * @remarks This only works on Android.\n * @example const browsers = useBrowsers();\n */\nexport function useBrowsers(): string[] {\n\tconst [browsers, setBrowsers] = useState<string[]>([]);\n\n\tuseEffect(() => {\n\t\tif (Platform.OS !== 'android') {\n\t\t\treturn;\n\t\t}\n\n\t\tgetCustomTabsSupportingBrowsersAsync().then(\n\t\t\tresult => setBrowsers(result.browserPackages),\n\t\t);\n\t}, []);\n\n\treturn browsers;\n}\n"]}